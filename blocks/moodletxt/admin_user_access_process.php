<?php

    /**
     * User access admin page for MoodleTxt.  Allows admins to configure
     * send/receive permissions for all Moodle users
     *
     * I've split the form processing by form, rather than by
     * POST/GET.  Makes for a few more conditional statements,
     * but it's easier to keep track of on a page like this.
     *
     * @author Greg J Preece <support@txttools.co.uk>
     * @copyright Copyright &copy; 2006 Onwards, Cy-nap Ltd. All rights reserved.
     * @version 2010012512
     * @since 2007041612
     */

    function returnSuccess() {

        echo('<ResultSuccess />');

    }

    function returnError($errorCode, $errorMessage) {

        echo('<Error>
    <ErrorCode><![CDATA[' . $errorCode . ']]></ErrorCode>
    <ErrorMessage><![CDATA[' . $errorMessage . ']]></ErrorMessage>
</Error>');

    }

    /*
      ############################################################
      # SET UP
      ############################################################
    */

    // Get config and required libraries
    require_once('../../config.php');
    require_once($CFG->libdir.'/datalib.php');
    require_once($CFG->dirroot . '/blocks/moodletxt/lib.php');
    require_once($CFG->dirroot . '/blocks/moodletxt/db/sqllib.php');
    require_once($CFG->dirroot . '/blocks/moodletxt/data/moodletxt_user_account_link.php');

     /* Kill the irritating notices generated by PHP
    because result sets are not being freed, and prevent
    guff being inserted into the response. This is relatively
    safe in here - the script runs entirely off the existing Moodle
    framework. */

    error_reporting(0);

    require_login();

    // Create site context
    $sitecontext = get_context_instance(CONTEXT_SYSTEM, SITEID);

    // Check for admin
    if (! has_capability('moodle/site:doanything', $sitecontext, $USER->id)) {

        error(get_string('errornopermission', 'block_moodletxt'));

    }

    $errorArray = array();
    $noticeArray = array();

    // Check for form ID
    $formid = required_param('formid', PARAM_ALPHA);
    $vkey = required_param('vkey', PARAM_ALPHANUM);

    // Check key
    if ($vkey != $SESSION->moodletxt->vkey) {

        // Kill the vkey
        unset($SESSION->moodletxt->vkey);

        // Error
        returnError('badkey', get_string('errorbadvkey', 'block_moodletxt'));

        die();

    }

    switch($formid) {

        /*
          ############################################################
          # "REMOVE SINGLE ACCOUNT ACCESS" FORM PROCESSING
          ############################################################
        */

        case "removeaccess":

            // Read in form vars
            $remUserID = required_param('userID', PARAM_INT);
            $remCourse = required_param('courseID', PARAM_INT);
            $remAccount = required_param('accountaccess', PARAM_INT);

            $p = $CFG->prefix;

            $currentLink = get_record('moodletxt_accounts_user',
                'moodleuser', $remUserID,
                'courseid', $remCourse,
                'id', $remAccount);

            if ((is_object($currentLink)) && ($currentLink->active)) {

                $currentLink->active = 0;

                update_record('moodletxt_accounts_user', $currentLink);

            }

            returnSuccess();

            break;

        /*
          ############################################################
          # "USER GRANT ACCESS" FORM PROCESSING
          ############################################################
        */

        case "grantaccess":

            $grantUserID = required_param('userID', PARAM_INT);
            $grantCourse = required_param('courseID', PARAM_INT);
            $grantAccount = required_param('txttoolsaccounts', PARAM_INT);

            $p = $CFG->prefix;

            $oldLink = get_record('moodletxt_accounts_user',
                'moodleuser', $grantUserID,
                'courseid', $grantCourse,
                'txttoolsaccount', $grantAccount);

            if (is_object($oldLink)) {

                $oldLink->active = 1;

                update_record('moodletxt_accounts_user', $oldLink);

            } else {

                // Create new record
                $newLink = new stdClass;
                $newLink->moodleuser = $grantUserID;
                $newLink->courseid = $grantCourse;
                $newLink->txttoolsaccount = $grantAccount;
                $newLink->active = 1;

                insert_record('moodletxt_accounts_user', $newLink);

            }

            break;

        /*
          ############################################################
          # "REMOVE COURSE ACCESS" FORM PROCESSING
          ############################################################
        */

        case "courseremoveaccess":

            // Read in form params
            $courseid = required_param('courseID', PARAM_INT);
            $accountid = required_param('accountid', PARAM_INT);

            // Check course ID
            $checkcourse = count_records('course', 'id', $courseid);

            if ($checkcourse > 0) {

                // Get query to disable all links to this account
                $sql = moodletxt_get_sql('admincourseswitchacc');
                $sql = sprintf($sql, 0, $courseid, $accountid);

                // Run query - sorry for execute_sql(), but there's no ruddy
                // way I'm running individual update queries!
                execute_sql($sql, false);

            }

            returnSuccess();

            break;

        /*
          ############################################################
          # "GRANT COURSE ACCESS" FORM PROCESSING
          ############################################################
        */

        case "coursegrantaccess":

            // Read in form params
            $courseid = required_param('courseID', PARAM_INT);
            $accountid = required_param('accountid', PARAM_INT);

            // Get all users on the course to create links
            $admins = get_users_by_capability($sitecontext, 'moodle/site:doanything', 'u.id,u.username,u.firstname,u.lastname', 'u.lastname ASC, u.firstname ASC');

            $coursecontext = get_context_instance(CONTEXT_COURSE, $courseid);
            $courseteachers = get_users_by_capability($coursecontext, 'mod/assignment:grade', 'u.id, u.username, u.firstname, u.lastname', 'u.lastname ASC');

            if (!is_array($admins)) $admins = array();
            if (!is_array($courseteachers)) $courseteachers = array();
            $courseusers = $admins + $courseteachers;

            // Get all existing links to this account
            $where = "courseid = '" . $courseid . "' AND txttoolsaccount = '" . $accountid . "'";

            $existinglinks = get_records_select('moodletxt_accounts_user', $where, '', 'id, moodleuser');
            $linkarr = array();

            foreach ($existinglinks as $link) {

                array_push($linkarr, $link->moodleuser);

            }

            // Get SQL for updating disabled links
            $sql = moodletxt_get_sql('admincourseswitchacc');
            $sql = sprintf($sql, 1, $courseid, $accountid);

            execute_sql($sql, false);

            // Iterate through and add new links
            if (is_array($courseusers)) {

                foreach($courseusers as $user) {

                    if (! in_array($user->id, $linkarr)) {

                        $insobj = new moodletxt_user_account_link(moodletxt_escape_string($user->id), $courseid,
                                        $accountid, 1);

                        insert_record('moodletxt_accounts_user', $insobj);

                    }

                }

            }

            returnSuccess();

            break;

        /*
          ############################################################
          # "DELETE USER FILTER" FORM PROCESSING
          ############################################################
        */

        case "deleteuserfilter":

            $delUserID = required_param('delfilteruserid', PARAM_INT);
            $delFilterID = required_param('userinboundfilters', PARAM_INT);

            $filuserinbox = get_record('moodletxt_inbox', 'userid', $delUserID);

            if (is_object($filuserinbox)) {

                // Delete filter link
                delete_records('moodletxt_inbox_filter', 'filter', $delFilterID,
                        'inbox', moodletxt_escape_string($filuserinbox->id));

                // Check to see if link is dead
                $checklinks = count_records('moodletxt_inbox_filter', 'filter', $delFilterID);

                if ($checklinks == 0) {

                    delete_records('moodletxt_filter', 'id', $delFilterID);

                }

            }

            returnSuccess();

            break;

        /*
          ############################################################
          # "ADD USER FILTER" FORM PROCESSING
          ############################################################
        */

        case "adduserfilter":

            // Get form vars
            $filterUserID = required_param('addfilteruserid', PARAM_INT);
            $filterAccountID = required_param('userfilteraccounts', PARAM_INT);
            $filterType = required_param('filtertype', PARAM_ALPHA);
            $filterValue = '';
            $typefield = '';

            switch ($filterType) {

                case 'keyword':

                    $filterValue = required_param('userfilterkeyword', PARAM_ALPHANUM);
                    $typefield = 'keyword';

                    break;

                case 'phoneno':

                    $filterValue = required_param('userfilterphone', PARAM_CLEAN);
                    $typefield = 'phoneno';

                    break;

            }

            if ($filterValue == '')
                break;

            $filterinbox = get_record('moodletxt_inbox', 'userid', $filterUserID);

            // If user doesn't already have an inbox, create one.  We're nice like that
            if (! is_object($filterinbox)) {

                $filterinboxid = moodletxt_create_inbox($filterUserID);
                $filterinbox = get_record('moodletxt_inbox', 'id', moodletxt_escape_string($filterinboxid));

            }

            // Check to see if filter already exists
            $existingfilter = get_record('moodletxt_filter', 'account', $filterAccountID,
                        'type', moodletxt_escape_string($typefield),
                        'value', $filterValue);

            $existingfilterid = $existingfilter->id;

            if (! is_object($existingfilter)) {

                $filterobj = new stdClass;
                $filterobj->account = $filterAccountID;
                $filterobj->type = moodletxt_escape_string($typefield);
                $filterobj->value = $filterValue;

                $existingfilterid = insert_record('moodletxt_filter', $filterobj);

            }

            // Check to see if link already exists
            $existingfilterlink = get_record('moodletxt_inbox_filter', 'filter', moodletxt_escape_string($existingfilterid),
                        'inbox', moodletxt_escape_string($filterinbox->id));

            if (! is_object($existingfilterlink)) {

                $filterlink = new stdClass;
                $filterlink->filter = moodletxt_escape_string($existingfilterid);
                $filterlink->inbox = moodletxt_escape_string($filterinbox->id);

                insert_record('moodletxt_inbox_filter', $filterlink);

            }

            returnSuccess();

            break;

        case "categorygrantaccess":



            break;

    }

// Make sure there are no new-lines here

?>